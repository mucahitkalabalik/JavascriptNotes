export html item 

function exportItem() {
  var exportElement = document.getElementById('export')

  var clone = exportElement.cloneNode(true)
  clone.style.width = exportElement.scrollWidth + 'px'
  clone.style.height = exportElement.scrollHeight + 'px'
  clone.style.overflow = 'visible'
  clone.style.position = 'absolute'
  clone.style.top = '-9999px' // Ekranın dışında yerleştir

  document.body.appendChild(clone)

  html2canvas(clone, {
    useCORS: true,
  }).then(function (canvas) {
    var imgData = canvas.toDataURL('image/png')

    var link = document.createElement('a')
    link.href = imgData
    link.download = 'myDivImage.png'
    link.click()

    document.body.removeChild(clone)
  })
}

***************************************************************

function goTo(page) {

  const routeData = router.resolve({
    name: 'Kullanıcı',
    params: { id: props.selected ? props.selected : user.value.id },
    query: { type: page },
  })
  window.open(routeData.href, '_blank')

}

***************************************************************

Props with multi-language support specific to a component
import { useI18n } from "vue-i18n";
const { t } = useI18n();

:title="t('userDetail').toUpperCase()"
Ï
***************************************************************

function getImageUrl(country) {
  return new URL(`@/assets/flags/${country}.png`, import.meta.url)
}

***************************************************************

CREATE SEARCH OBJECT

let dateTitles = ref(['startedBefore', 'startedAfter'])
  const filterDataKeys = Object.keys(filterData.value)
  filterDataKeys.forEach(filterKeys => {
    if (nullCheck(filterData.value[filterKeys])) {
      dateTitles.value.forEach(date => {
        if (date === filterKeys) {
          filterData.value[filterKeys] = new Date(filterData.value[filterKeys]).toISOString()
        }
      })
      data[filterKeys] = filterData.value[filterKeys]
    }
  })

*****************************************************************

DATE FORMAT : 12/07/2023 15:0:00

function dateFormat(date) {
  var timeStamp = Date.parse(date)
  var dateFormat = new Date(timeStamp)
  return (
    dateFormat.getDate() +
    '/' +
    (dateFormat.getMonth() + 1) +
    '/' +
    dateFormat.getFullYear() +
    ' ' +
    dateFormat.getHours() +
    ':' +
    dateFormat.getMinutes() +
    ':' +
    dateFormat.getSeconds()
  )
}

***************************************************************
NULL CHECK

function nullCheck(value) {
  if (
    value == '' ||
    value == null ||
    value == undefined ||
    (!value && value != 0) ||
    (!value && typeof value == 'boolean')
  ) {
    return false
  }
  return true
}

**************************************************************
PAGINATİON CALCULATE

 state.pagination = Math.ceil(historyRes.data.total / 20)

**************************************************************
DYNAMIC LANG KEYS
const messages = Object.fromEntries(
  Object.entries(import.meta.glob('./locales/*.json', { eager: true })).map(([key, value]) => [
    key.slice(10, -5),
    value.default,
  ]),
)

**************************************************************
PARAMS CREATOR

let params = null
 for (const [key, value] of Object.entries(data)) {
      if (params) {
            params = params + `&${key}=${value}`
      } else {
            params = `&${key}=${value}`
      }
}

let firstTime = (dateStart, dateCreated) => {
  selectedHistory.value = null

  const date1 = new Date(dateStart)

  const date2 = new Date(dateCreated)

  let timeDifference = date2.getTime() - date1.getTime()

  var seconds = new Date(timeDifference).getTime() / 1000

  return seconds
}

**************************************************************

// 👉 Required Validator
export const requiredValidator = value => {
  if (isNullOrUndefined(value) || isEmptyArray(value) || value === false)
    return 'Zorunlu alan!'
  
  return !!String(value).trim().length || 'Zorunlu alan!'
}

// 👉 Email Validator
export const emailValidator = value => {
  if (isEmpty(value))
    return true
  const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
  if (Array.isArray(value))
    return value.every(val => re.test(String(val))) || 'Mail adresinizi girin.'
  
  return re.test(String(value)) || 'Email geçerli değil.'
}

// 👉 Password Validator
export const passwordValidator = password => {
  const regExp = /(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%&*()]).{8,}/
  const validPassword = regExp.test(password)
  
  return (
    // eslint-disable-next-line operator-linebreak
    validPassword ||
        'Field must contain at least one uppercase, lowercase, special character and digit with min 8 chars')
}

// 👉 Confirm Password Validator
export const confirmedValidator = (value, target) => value === target || 'The Confirm Password field confirmation does not match'

// 👉 Between Validator
export const betweenValidator = (value, min, max) => {
  const valueAsNumber = Number(value)
  
  return (Number(min) <= valueAsNumber && Number(max) >= valueAsNumber) || `Enter number between ${min} and ${max}`
}

// 👉 Integer Validator
export const integerValidator = value => {
  if (isEmpty(value))
    return true
  if (Array.isArray(value))
    return value.every(val => /^-?[0-9]+$/.test(String(val))) || 'This field must be an integer'
  
  return /^-?[0-9]+$/.test(String(value)) || 'This field must be an integer'
}

// 👉 Regex Validator
export const regexValidator = (value, regex) => {
  if (isEmpty(value))
    return true
  let regeX = regex
  if (typeof regeX === 'string')
    regeX = new RegExp(regeX)
  if (Array.isArray(value))
    return value.every(val => regexValidator(val, regeX))
  
  return regeX.test(String(value)) || 'The Regex field format is invalid'
}

// 👉 Alpha Validator
export const alphaValidator = value => {
  if (isEmpty(value))
    return true
  
  return /^[A-Z]*$/i.test(String(value)) || 'The Alpha field may only contain alphabetic characters'
}

// 👉 URL Validator
export const urlValidator = value => {
  if (isEmpty(value))
    return true
  const re = /^(http[s]?:\/\/){0,1}(www\.){0,1}[a-zA-Z0-9\.\-]+\.[a-zA-Z]{2,5}[\.]{0,1}/
  
  return re.test(String(value)) || 'URL is invalid'
}

// 👉 Length Validator
export const lengthValidator = (value, length) => {
  if (isEmpty(value))
    return true
  
  return String(value).length === length || `The Min Character field must be at least ${length} characters`
}

// 👉 Alpha-dash Validator
export const alphaDashValidator = value => {
  if (isEmpty(value))
    return true
  const valueAsString = String(value)
  
  return /^[0-9A-Z_-]*$/i.test(valueAsString) || 'All Character are not valid'
}


